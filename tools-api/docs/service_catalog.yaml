services:
  - name: "Rich Text Parser"
    summary: "Turn HTML or Markdown into Google Docs-friendly instructions so agents can create polished docs automatically."
    docs_url: "http://localhost:8000/docs#/parser"
    endpoints:
      - method: "POST"
        path: "/parse/html"
        headline: "HTML to Google Docs"
        tagline: "Feed marketing-approved HTML and receive the Google Docs operations to recreate it."
        description: "Convert HTML markup into Google Docs batchUpdate requests."
        request:
          content_type: "application/json"
          model: "HTMLParseRequest"
          fields:
            html: "string – HTML markup to convert."
          example:
            html: "<h1>Hello World</h1><p>This becomes a Google Doc.</p>"
        response:
          content_type: "application/json"
          model: "GoogleDocsBatchUpdate"
          fields:
            requests: "list – Google Docs API batchUpdate operations."
          example:
            requests:
              - insertText:
                  location:
                    index: 1
                  text: "Hello World\n"
      - method: "POST"
        path: "/parse/markdown"
        headline: "Markdown to Google Docs"
        tagline: "Turn Markdown release notes into Google Docs-ready edits."
        description: "Convert Markdown into Google Docs batchUpdate requests via the HTML pipeline."
        request:
          content_type: "application/json"
          model: "MarkdownParseRequest"
          fields:
            markdown: "string – Markdown content to convert."
          example:
            markdown: "# Release Notes\n- Item one\n- Item two"
        response:
          content_type: "application/json"
          model: "GoogleDocsBatchUpdate"
          fields:
            requests: "list – Google Docs API batchUpdate operations."
      - method: "POST"
        path: "/parse/docs/html"
        headline: "HTML quick convert"
        tagline: "Convert HTML instantly without touching the async queue."
        description: "Synchronous HTML conversion helper for Google Docs batchUpdate payloads."
        request:
          content_type: "application/json"
          model: "HTMLParseRequest"
          fields:
            html: "string – HTML markup to convert."
        response:
          content_type: "application/json"
          fields:
            requests: "list – Google Docs API batchUpdate operations."
        notes:
          - "Optimized for n8n HTTP Request nodes where async queues are unnecessary."
      - method: "POST"
        path: "/parse/docs/markdown"
        headline: "Markdown quick convert"
        tagline: "Use when you want Markdown converted to Google Docs edits in real time."
        description: "Synchronous Markdown conversion helper for Google Docs batchUpdate payloads."
        request:
          content_type: "application/json"
          model: "MarkdownParseRequest"
          fields:
            markdown: "string – Markdown content to convert."
        response:
          content_type: "application/json"
          fields:
            requests: "list – Google Docs API batchUpdate operations."
      - method: "POST"
        path: "/parse/queue/html"
        headline: "Queue HTML conversion"
        tagline: "Hand off large HTML conversions to the background worker and poll later."
        description: "Enqueue HTML conversion work to Redis/RQ for long-running jobs."
        request:
          content_type: "application/json"
          model: "HTMLParseRequest"
          fields:
            html: "string – HTML markup to convert."
        response:
          content_type: "application/json"
          model: "EnqueueResponse"
          fields:
            job_id: "string – Identifier that can be polled via /parse/job/{id}."
      - method: "POST"
        path: "/parse/queue/markdown"
        headline: "Queue Markdown conversion"
        tagline: "Offload Markdown conversions to the queue when they might take a while."
        description: "Enqueue Markdown conversion work to Redis/RQ for long-running jobs."
        request:
          content_type: "application/json"
          model: "MarkdownParseRequest"
          fields:
            markdown: "string – Markdown content to convert."
        response:
          content_type: "application/json"
          model: "EnqueueResponse"
          fields:
            job_id: "string – Identifier that can be polled via /parse/job/{id}."
      - method: "GET"
        path: "/parse/job/{job_id}"
        headline: "Check queued job"
        tagline: "See whether a queued conversion is still running, finished, or failed."
        description: "Check the status of a queued conversion job."
        response:
          content_type: "application/json"
          fields:
            status: "string – queued|started|finished|failed|unknown."
            result: "object – Present when status=finished."
            error: "string – Present when status=failed."
  - name: "Google Docs JSON Parser"
    summary: "Pull plain text, links, and image references out of Google Docs JSON exports for downstream automations."
    docs_url: "http://localhost:8000/docs#/Google_Docs_Parser"
    endpoints:
      - method: "POST"
        path: "/parse/gdocs/json"
        headline: "Docs to text"
        tagline: "Paste a Google Docs JSON export and receive clean text, links, and image references."
        description: "Parse a Google Docs JSON payload produced by the Google Docs API."
        request:
          content_type: "application/json"
          model: "GoogleDocs JSON"
          fields:
            Content: "object – Raw Google Docs document JSON."
        response:
          content_type: "application/json"
          model: "GoogleDocsParseResponse"
          fields:
            text: "string – Plain text extracted from the document."
            urls: "list – Hyperlinks that were present in the document."
            images: "list – Image URLs present in the document."
      - method: "POST"
        path: "/parse/gdocs/file"
        headline: "Docs file to text"
        tagline: "Upload a saved Google Docs JSON file and pull out the essentials."
        description: "Upload a Google Docs JSON export file and receive structured output."
        request:
          content_type: "multipart/form-data"
          fields:
            file: "file – Google Docs JSON export."
        response:
          content_type: "application/json"
          model: "GoogleDocsParseResponse"
          fields:
            text: "string"
            urls: "list"
            images: "list"
  - name: "Docx Toolkit"
    summary: "Quickly turn uploaded .docx files into plain text for agents or LLMs."
    docs_url: "http://localhost:8000/docs#/docx"
    endpoints:
      - method: "POST"
        path: "/docx/parse"
        headline: "DOCX to plain text"
        tagline: "Send a .docx file and get back clean text with file metadata."
        description: "Upload a binary .docx file and extract plain text."
        request:
          content_type: "application/octet-stream"
          fields:
            body: "bytes – Raw .docx binary data sent as the HTTP body."
        response:
          content_type: "application/json"
          fields:
            text: "string – Extracted plain text."
            size_bytes: "integer – Size of the uploaded file in bytes."
            content_type: "string – Content-Type header received from the client."
